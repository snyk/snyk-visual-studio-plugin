// 
// Properties.cs
// 
// This file is auto-generated by Amplitude.
// To update run 'ampli pull visual-studio-plugin'
// 
// Questions? We're here to help:
// https://developers.data.amplitude.com/dotnet
// 

using System.Collections.Generic;
using System.Linq;
using Manatee.Json;
using Manatee.Json.Serialization;

namespace Iteratively
{
    public class Properties
    {
        private readonly Dictionary<string, object> _properties;

        public Properties(Dictionary<string, object> properties = null)
        {
            _properties = properties != null
                ? properties.Where(kvp => kvp.Value != null)
                   .ToDictionary(kvp => kvp.Key, kvp => kvp.Value)
                : new Dictionary<string, object>();
        }

        public Dictionary<string, object> ToDictionary() => new Dictionary<string, object>(
            _properties
        );

        internal JsonValue ToJson(JsonSerializer serializer) => serializer.Serialize(_properties);

        public string ToString(JsonSerializer serializer) => ToJson(serializer).ToString();

        public override string ToString() => ToString(_serializer);

        internal static Properties Concatenate(params Properties[] properties)
        {
            var merged = new Dictionary<string, object>();
            foreach (var p in properties)
                foreach (var prop in p._properties)
                    merged[prop.Key] = prop.Value;
            return new Properties(merged);
        }

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
                return false;

            var other = (Properties) obj;

            return _properties.Count == other._properties.Count
                && CollectionUtils.CollectionsAreEqual(_properties, other._properties);
        }

        public override int GetHashCode() => CollectionUtils.GetHashCode(this._properties);

        private static readonly JsonSerializer _serializer = JsonSerializerFactory.Create();
    }
}