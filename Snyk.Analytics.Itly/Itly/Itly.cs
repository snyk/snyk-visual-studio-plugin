// 
// Itly.cs
// 
// This file is auto-generated by Amplitude.
// To update run 'ampli pull visual-studio-plugin'
// 
// Questions? We're here to help:
// https://developers.data.amplitude.com/dotnet
// 

using System;
using System.Collections.Generic;

namespace Iteratively
{
    /// <summary>
    /// Itly Options.
    /// </summary>
    public sealed class Options
    {
        public DestinationsOptions Destinations { get; }
        public bool Disabled { get; }
        public Environment Environment { get; }
        public ILogger Logger { get; }
        public ValidationOptions Validation { get; }

        /// <summary>
        /// Create Itly Options.
        /// </summary>
        /// <param name="destinations">Destination specific configuration.</param>
        /// <param name="disabled">Turn event tracking off.</param>
        /// <param name="environment">Environment settings.</param>
        /// <param name="logger">Logger instance.</param>
        /// <param name="validation">Validation options.</param>
        public Options(
            DestinationsOptions destinations,
            bool disabled = false,
            Environment environment = Environment.Development,
            ILogger logger = null,
            ValidationOptions validation = null
        )
        {
            if (destinations == null)
                throw new ArgumentNullException(nameof(destinations));

            Destinations = destinations;
            Disabled = disabled;
            Environment = environment;
            Logger = logger ?? new DefaultLogger();
            Validation = validation ?? new ValidationOptions(failOnError: environment != Environment.Production);
        }
    }


    /// <summary>
    /// Configuration for event destinations.
    /// </summary>
    public sealed class DestinationsOptions
    {
        public CustomOptions Custom { get; }

        /// <summary>
        /// Create configuration for event destinations.
        /// </summary>
        /// <param name="custom">Configuration options specific to 'Custom' destination.</param>
        public DestinationsOptions(CustomOptions custom)
        {
            if (custom == null)
                throw new ArgumentNullException(nameof(custom));

            Custom = custom;
        }
    }

    internal enum Vendor
    {
        Custom
    }

    public class Clients
    {

        public Clients() {

        }
    }

    public static class Itly
    {
        internal static ItlyInstance Instance { get; private set; }

        public static Clients Destinations { get; private set; }

        /// <summary>
        /// Initializes Itly with configured options.
        /// </summary>
        /// <param name="options">Itly Options.</param>
        public static void Load(Options options)
        {
            AssertIsInitialized(false);
            if (options == null)
                throw new ArgumentNullException(nameof(options));

            Instance = new ItlyInstance(
                schemas: new Dictionary<string, string>
                {
                    ["identify"] = "{\"$id\":\"https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/identify\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Identify\",\"description\":\"\",\"type\":\"object\",\"properties\":{\"accountType\":{\"description\":\"when a User record is an actual user or when it’s a “service account”\",\"enum\":[\"user\",\"service\",\"app-instance\",\"automated-test-user\"]},\"admin_link\":{\"description\":\"Link to access more information about the user\",\"type\":\"string\"},\"adminLink\":{\"description\":\"Link to access more information about the user\",\"type\":\"string\"},\"auth_provider\":{\"description\":\"Auth provider (login method)\",\"type\":\"string\"},\"authProvider\":{\"description\":\"Auth provider (login method)\",\"type\":\"string\"},\"created_at\":{\"description\":\"Timestamp of user creation\",\"type\":\"number\"},\"createdAt\":{\"description\":\"Timestamp of user creation\",\"type\":\"number\"},\"email\":{\"description\":\"Email address for the user\",\"type\":\"string\"},\"hasFirstIntegration\":{\"description\":\"Whether or not the user has their first integration set up\",\"type\":\"boolean\"},\"hasFirstProject\":{\"description\":\"Whether or not the user has their first project imported\",\"type\":\"boolean\"},\"hasPersonalEmail\":{\"description\":\"Indicates whether user has a personal or business email address\",\"type\":\"boolean\"},\"isNonUser\":{\"description\":\"Applies to non-user identities, such as Snyk Orgs\",\"type\":\"boolean\"},\"is_snyk\":{\"description\":\"Whether or not the user belongs to the Snyk org (determined by the email address ending with @snyk.io)\",\"type\":\"boolean\"},\"isSnyk\":{\"description\":\"Whether or not the user belongs to the Snyk org (determined by the email address ending with @snyk.io)\",\"type\":\"boolean\"},\"isSnykAdmin\":{\"description\":\"Whether or not the user should be considered a Snyk administrator\",\"type\":\"boolean\"},\"learnPreferredEcosystems\":{\"description\":\"An array of the ecosystems(eg: javascript, java, docker, kubernetes) that the user selects as their favorites on the snyk learn app.\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"uniqueItems\":true},\"productUpdatesConsent\":{\"description\":\"Used by Marketo to determine whether to send product updates emails to users. We are setting this value during product updates consent flow after registration.\",\"type\":\"boolean\"},\"productUpdatesConsentIsDisplayed\":{\"description\":\"A trait for users who got redirected to `/product-updates` consent page.\\\\n\\\\n\\\\nWill allow us to differentiate these users in Marketo and ensure they don't receive product updates emails without explicitly opting in.\",\"type\":\"boolean\"},\"user_id\":{\"description\":\"Public ID of user\",\"type\":\"string\"},\"username\":{\"description\":\"Username of the user\",\"type\":\"string\"},\"utm_campaign\":{\"description\":\"Query utmcampaign. All UTM properties must be in snake\\\\_case.\",\"type\":\"string\"},\"utm_content\":{\"description\":\"Query utm\\\\_content. All UTM properties must be in snake\\\\_case.\",\"type\":\"string\"},\"utm_medium\":{\"description\":\"Query utm\\\\_medium. All UTM properties must be in snake\\\\_case.\",\"type\":\"string\"},\"utm_source\":{\"description\":\"Query utm\\\\_source. All UTM properties must be in snake\\\\_case.\",\"type\":\"string\"},\"utm_term\":{\"description\":\"Query utm\\\\_term. All UTM properties must be in snake\\\\_case.\",\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[]}",
                    ["group"] = "{\"$id\":\"https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/group\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Group\",\"description\":\"\",\"type\":\"object\",\"properties\":{\"groupId\":{\"description\":\"ID that is used in conjunction with a groupType to specify an Org or a Group association: {groupId: 1234, groupType: \\\"org\\\"}\",\"type\":\"string\"},\"groupName\":{\"description\":\"The name of the group associated with the org\",\"type\":\"string\"},\"groupType\":{\"description\":\"Key that is used to specify the name of the Segment Group that a groupId is being set for.\",\"enum\":[\"org\",\"group\",\"account\"]},\"internalName\":{\"description\":\"The internal name (org.name) of the org\",\"type\":\"string\"},\"name\":{\"description\":\"The display name of the org\",\"type\":\"string\"},\"plan\":{\"description\":\"The plan of the org\",\"type\":\"string\"},\"projectTypes\":{\"description\":\"The types of projects in the org\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"uniqueItems\":true}},\"additionalProperties\":false,\"required\":[]}",
                    ["https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Analysis%20Is%20Ready/version/2.0.3"] = "{\"$id\":\"https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Analysis%20Is%20Ready/version/2.0.3\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Analysis Is Ready\",\"description\":\"Triggered when the analysis is loaded within the IDE.\",\"type\":\"object\",\"properties\":{\"analysisType\":{\"description\":\"Analysis types selected by the user for the scan:\\\\n\\\\n* open source vulnerabilities\\\\n\\\\n* code quality issues\\\\n\\\\n* code security vulnerabilities\\\\n\\\\n* advisor issues\\\\n\\\\n* infrastructure as code issues\\\\n\\\\n* container vulnerabilities\",\"enum\":[\"Snyk Advisor\",\"Snyk Code Quality\",\"Snyk Code Security\",\"Snyk Open Source\",\"Snyk Container\",\"Snyk Infrastructure as Code\"]},\"ide\":{\"description\":\"Ide family.\",\"enum\":[\"Visual Studio Code\",\"Visual Studio\",\"Eclipse\",\"JetBrains\"]},\"itly\":{\"description\":\"Set to true for filtering within Segment\",\"const\":true},\"result\":{\"description\":\"\",\"enum\":[\"Success\",\"Error\"]}},\"additionalProperties\":false,\"required\":[\"analysisType\",\"ide\",\"itly\",\"result\"]}",
                    ["https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Analysis%20Is%20Triggered/version/2.0.3"] = "{\"$id\":\"https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Analysis%20Is%20Triggered/version/2.0.3\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Analysis Is Triggered\",\"description\":\"User triggers an analysis or analysis is automatically triggered.\",\"type\":\"object\",\"properties\":{\"analysisType\":{\"description\":\"Analysis types selected by the user for the scan: open source vulnerabilities, code quality issues and/or code security vulnerabilities.\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"minItems\":1,\"uniqueItems\":true},\"ide\":{\"description\":\"Ide family.\",\"enum\":[\"Visual Studio Code\",\"Visual Studio\",\"Eclipse\",\"JetBrains\"]},\"itly\":{\"description\":\"Set to true for filtering within Segment\",\"const\":true},\"triggeredByUser\":{\"description\":\"* True means that the analysis was triggered by the User.\\\\n\\\\n* False means that the analysis was triggered automatically by the plugin.\",\"type\":\"boolean\"}},\"additionalProperties\":false,\"required\":[\"analysisType\",\"ide\",\"itly\",\"triggeredByUser\"]}",
                    ["https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Authenticate%20Button%20Is%20Clicked/version/1.0.3"] = "{\"$id\":\"https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Authenticate%20Button%20Is%20Clicked/version/1.0.3\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Authenticate Button Is Clicked\",\"description\":\"This Event fires when the authenticate button is clicked.\",\"type\":\"object\",\"properties\":{\"eventSource\":{\"description\":\"Used to identify the source for multi-source events.\\\\n\\\\nFor example, if a given event is shared between Snyk Advisor and Snyk Learn, this property helps to differentiate between the two.\",\"enum\":[\"Advisor\",\"App\",\"Learn\",\"IDE\"]},\"ide\":{\"description\":\"Ide family.\",\"enum\":[\"Visual Studio Code\",\"Visual Studio\",\"Eclipse\",\"JetBrains\"]},\"itly\":{\"description\":\"Set to true for filtering within Segment\",\"const\":true}},\"additionalProperties\":false,\"required\":[\"ide\",\"itly\"]}",
                    ["https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Issue%20In%20Tree%20Is%20Clicked/version/2.0.4"] = "{\"$id\":\"https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Issue%20In%20Tree%20Is%20Clicked/version/2.0.4\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Issue In Tree Is Clicked\",\"description\":\"Triggered when the user selects an issue from the issues list and the issue is loaded.\",\"type\":\"object\",\"properties\":{\"ide\":{\"description\":\"Ide family.\",\"enum\":[\"Visual Studio Code\",\"Visual Studio\",\"Eclipse\",\"JetBrains\"]},\"issueId\":{\"description\":\"Issue ID as received from the backend.\",\"type\":\"string\"},\"issueType\":{\"description\":\"Issue type\",\"enum\":[\"Advisor\",\"Code Quality Issue\",\"Code Security Vulnerability\",\"Licence Issue\",\"Open Source Vulnerability\",\"Infrastructure as Code Issue\",\"Container Vulnerability\"]},\"itly\":{\"description\":\"Set to true for filtering within Segment\",\"const\":true},\"severity\":{\"description\":\"Severity of the issue\",\"enum\":[\"High\",\"Medium\",\"Low\",\"Critical\"]}},\"additionalProperties\":false,\"required\":[\"ide\",\"itly\"]}",
                    ["https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Welcome%20Is%20Viewed/version/1.0.3"] = "{\"$id\":\"https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Welcome%20Is%20Viewed/version/1.0.3\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Welcome Is Viewed\",\"description\":\"User installs the IDE plugin and see Snyk's welcome screen.\",\"type\":\"object\",\"properties\":{\"ide\":{\"description\":\"Ide family.\",\"enum\":[\"Visual Studio Code\",\"Visual Studio\",\"Eclipse\",\"JetBrains\"]},\"itly\":{\"description\":\"Set to true for filtering within Segment\",\"const\":true}},\"additionalProperties\":false,\"required\":[\"ide\",\"itly\"]}"
                },
                properties: new Properties(new Dictionary<string, object> { }),
                context: new Context(),
                disabled: options.Disabled,
                environment: options.Environment,
                logger: options.Logger,
                validation: options.Validation,
                destinations: new Dictionary<Vendor, DestinationConfiguration>
                {

                    [Vendor.Custom] = new DestinationConfiguration(
                        options.Destinations.Custom, new Dictionary<Environment, string>()
                    )
                }
            );
            Destinations = new Clients(
            );
        }

        internal static bool IsInitialized(bool initialized = true) {
            return initialized == (Instance != null);
        }

        internal static void AssertIsInitialized(bool initialized = true) {
            if (!IsInitialized(initialized))
                throw new InvalidOperationException(initialized
                    ? "Itly is not initialized. Call Itly.Load(new Options()) to init."
                    : "Itly is already initialized.");
        }

        /// <summary>
        /// Alias one user ID to another.
        /// </summary>
        /// <param name="userId">The user's new ID.</param>
        /// <param name="previousId">The user's previous ID.</param>
        public static void Alias(string userId, string previousId) {
            AssertIsInitialized();
            Instance.Alias(userId, previousId);
        }

        /// <summary>
        /// Set or update a user's properties.
        /// </summary>
        /// <param name="userId">The user's ID.</param>
        /// <param name="accountType">when a User record is an actual user or when it’s a “service account”</param>
        /// <param name="adminLink">Link to access more information about the user</param>
        /// <param name="admin_link">Link to access more information about the user</param>
        /// <param name="authProvider">Auth provider (login method)</param>
        /// <param name="auth_provider">Auth provider (login method)</param>
        /// <param name="createdAt">Timestamp of user creation</param>
        /// <param name="created_at">Timestamp of user creation</param>
        /// <param name="email">Email address for the user</param>
        /// <param name="hasFirstIntegration">Whether or not the user has their first integration set up</param>
        /// <param name="hasFirstProject">Whether or not the user has their first project imported</param>
        /// <param name="hasPersonalEmail">Indicates whether user has a personal or business email address</param>
        /// <param name="isNonUser">Applies to non-user identities, such as Snyk Orgs</param>
        /// <param name="isSnyk">Whether or not the user belongs to the Snyk org (determined by the email address ending with @snyk.io)</param>
        /// <param name="is_snyk">Whether or not the user belongs to the Snyk org (determined by the email address ending with @snyk.io)</param>
        /// <param name="isSnykAdmin">Whether or not the user should be considered a Snyk administrator</param>
        /// <param name="learnPreferredEcosystems">An array of the ecosystems(eg: javascript, java, docker, kubernetes) that the user selects as their favorites on the snyk learn app.</param>
        /// <param name="productUpdatesConsent">Used by Marketo to determine whether to send product updates emails to users. We are setting this value during product updates consent flow after registration.</param>
        /// <param name="productUpdatesConsentIsDisplayed">
        /// A trait for users who got redirected to `/product-updates` consent page.
        ///
        ///
        /// Will allow us to differentiate these users in Marketo and ensure they don't receive product updates emails without explicitly opting in.
        /// </param>
        /// <param name="user_id">Public ID of user</param>
        /// <param name="username">Username of the user</param>
        /// <param name="utmCampaign">Query utmcampaign. All UTM properties must be in snake\_case.</param>
        /// <param name="utmContent">Query utm\_content. All UTM properties must be in snake\_case.</param>
        /// <param name="utmMedium">Query utm\_medium. All UTM properties must be in snake\_case.</param>
        /// <param name="utmSource">Query utm\_source. All UTM properties must be in snake\_case.</param>
        /// <param name="utmTerm">Query utm\_term. All UTM properties must be in snake\_case.</param>
        public static void Identify(string userId, Identify.AccountType? accountType, string adminLink, string admin_link, string authProvider, string auth_provider, double? createdAt, double? created_at, string email, bool? hasFirstIntegration, bool? hasFirstProject, bool? hasPersonalEmail, bool? isNonUser, bool? isSnyk, bool? is_snyk, bool? isSnykAdmin, string[] learnPreferredEcosystems, bool? productUpdatesConsent, bool? productUpdatesConsentIsDisplayed, string user_id, string username, string utmCampaign, string utmContent, string utmMedium, string utmSource, string utmTerm) {
            AssertIsInitialized();
            var properties = new Identify(
                accountType,
                adminLink,
                admin_link,
                authProvider,
                auth_provider,
                createdAt,
                created_at,
                email,
                hasFirstIntegration,
                hasFirstProject,
                hasPersonalEmail,
                isNonUser,
                isSnyk,
                is_snyk,
                isSnykAdmin,
                learnPreferredEcosystems,
                productUpdatesConsent,
                productUpdatesConsentIsDisplayed,
                user_id,
                username,
                utmCampaign,
                utmContent,
                utmMedium,
                utmSource,
                utmTerm
            );
            Instance.Identify(userId, properties);
        }

        /// <summary>
        /// Set or update a user group's properties.
        /// </summary>
        /// <param name="userId">The user's ID.</param>
        /// <param name="groupIdInProperties">The group's ID.</param>
        /// <param name="groupId">ID that is used in conjunction with a groupType to specify an Org or a Group association: {groupId: 1234, groupType: "org"}</param>
        /// <param name="groupName">The name of the group associated with the org</param>
        /// <param name="groupType">Key that is used to specify the name of the Segment Group that a groupId is being set for.</param>
        /// <param name="internalName">The internal name (org.name) of the org</param>
        /// <param name="name">The display name of the org</param>
        /// <param name="plan">The plan of the org</param>
        /// <param name="projectTypes">The types of projects in the org</param>
        public static void Group(string userId, string groupIdInProperties, string groupId, string groupName, Group.GroupType? groupType, string internalName, string name, string plan, string[] projectTypes) {
            AssertIsInitialized();
            var properties = new Group(
                groupIdInProperties,
                groupName,
                groupType,
                internalName,
                name,
                plan,
                projectTypes
            );
            Instance.Group(userId, groupId, properties);
        }

        /// <summary>
        /// Track an event.
        /// </summary>
        /// <param name="userId">The user's ID.</param>
        /// <param name="event">The event to track.</param>
        public static void Track(string userId, Event @event)
        {
            AssertIsInitialized();
            Instance.Track(userId, @event.Name, @event);
        }

        /// <summary>
        /// Dispose of Itly resources.
        /// </summary>
        public static void Dispose()
        {
            Instance?.Dispose();
        }

        /// <summary>
        /// Track event 'Analysis Is Ready'.
        ///
        /// Triggered when the analysis is loaded within the IDE.
        ///
        /// Owner: Georgi Mitev
        /// </summary>
        /// <param name="userId">The user's ID.</param>
        /// <param name="analysisType">
        /// Analysis types selected by the user for the scan:
        ///
        /// * open source vulnerabilities
        ///
        /// * code quality issues
        ///
        /// * code security vulnerabilities
        ///
        /// * advisor issues
        ///
        /// * infrastructure as code issues
        ///
        /// * container vulnerabilities
        /// </param>
        /// <param name="ide">Ide family.</param>
        /// <param name="result">Property has no description provided in tracking plan.</param>
        public static void AnalysisIsReady(string userId, AnalysisIsReady.AnalysisType analysisType, AnalysisIsReady.Ide ide, AnalysisIsReady.Result result) {
            Track(userId, new AnalysisIsReady(
                analysisType,
                ide,
                result
            ));
        }

        /// <summary>
        /// Track event 'Analysis Is Triggered'.
        ///
        /// User triggers an analysis or analysis is automatically triggered.
        ///
        /// Owner: Georgi Mitev
        /// </summary>
        /// <param name="userId">The user's ID.</param>
        /// <param name="analysisType">Analysis types selected by the user for the scan: open source vulnerabilities, code quality issues and/or code security vulnerabilities.</param>
        /// <param name="ide">Ide family.</param>
        /// <param name="triggeredByUser">
        /// * True means that the analysis was triggered by the User.
        ///
        /// * False means that the analysis was triggered automatically by the plugin.
        /// </param>
        public static void AnalysisIsTriggered(string userId, string[] analysisType, AnalysisIsTriggered.Ide ide, bool triggeredByUser) {
            Track(userId, new AnalysisIsTriggered(
                analysisType,
                ide,
                triggeredByUser
            ));
        }

        /// <summary>
        /// Track event 'Authenticate Button Is Clicked'.
        ///
        /// This Event fires when the authenticate button is clicked.
        ///
        /// Owner: Bastian Doetsch
        /// </summary>
        /// <param name="userId">The user's ID.</param>
        /// <param name="ide">Ide family.</param>
        /// <param name="eventSource">
        /// Used to identify the source for multi-source events.
        ///
        /// For example, if a given event is shared between Snyk Advisor and Snyk Learn, this property helps to differentiate between the two.
        /// </param>
        public static void AuthenticateButtonIsClicked(string userId, AuthenticateButtonIsClicked.Ide ide, AuthenticateButtonIsClicked.EventSource? eventSource = null) {
            Track(userId, new AuthenticateButtonIsClicked(
                ide,
                eventSource
            ));
        }

        /// <summary>
        /// Track event 'Issue In Tree Is Clicked'.
        ///
        /// Triggered when the user selects an issue from the issues list and the issue is loaded.
        ///
        /// Owner: Georgi Mitev
        /// </summary>
        /// <param name="userId">The user's ID.</param>
        /// <param name="ide">Ide family.</param>
        /// <param name="issueId">Issue ID as received from the backend.</param>
        /// <param name="issueType">Issue type</param>
        /// <param name="severity">Severity of the issue</param>
        public static void IssueInTreeIsClicked(string userId, IssueInTreeIsClicked.Ide ide, string issueId = null, IssueInTreeIsClicked.IssueType? issueType = null, IssueInTreeIsClicked.Severity? severity = null) {
            Track(userId, new IssueInTreeIsClicked(
                ide,
                issueId,
                issueType,
                severity
            ));
        }

        public static void WelcomeIsViewed(string userId) => WelcomeIsViewed(userId, Iteratively.WelcomeIsViewed.Ide.VisualStudio);

        /// <summary>
        /// Track event 'Welcome Is Viewed'.
        ///
        /// User installs the IDE plugin and see Snyk's welcome screen.
        ///
        /// Owner: Georgi Mitev
        /// </summary>
        /// <param name="userId">The user's ID.</param>
        /// <param name="ide">Ide family.</param>
        public static void WelcomeIsViewed(string userId, WelcomeIsViewed.Ide ide) {
            Track(userId, new WelcomeIsViewed(
                ide
            ));
        }
    }

    internal sealed class ItlyInstance : ItlyBase
    {
        public ItlyInstance(
            Dictionary<string, string> schemas,
            Properties properties,
            Context context,
            bool disabled,
            Environment environment,
            ILogger logger,
            ValidationOptions validation,
            Dictionary<Vendor, DestinationConfiguration> destinations
        ) : base(schemas, properties, context, disabled, environment, logger, validation)
        {
            if (disabled)
                return;

            RegisterAdapter(Vendor.Custom, ((CustomOptions)destinations[Vendor.Custom].Options).Adapter);
            InitAdapters();
        }
    }

    /// <summary>
    /// Context properties.
    /// </summary>
    public sealed class Context : Event
    {
        /// <summary>
        /// Create new 'Context'.
        /// </summary>
        public Context() : base(
            "Context",
            "context",
            new Dictionary<string, object>()
            {

            }
        )
        {
        }
    }

    /// <summary>
    /// Identify properties.
    /// </summary>
    public sealed class Identify : Event
    {
        public enum AccountType
        {
            User,
            Service,
            AppInstance,
            AutomatedTestUser
        }

        private static readonly Dictionary<AccountType, string> AccountTypeValues = new Dictionary<AccountType, string>
        {
            [AccountType.User] = "user",
            [AccountType.Service] = "service",
            [AccountType.AppInstance] = "app-instance",
            [AccountType.AutomatedTestUser] = "automated-test-user"
        };

        /// <summary>
        /// Create new 'Identify'.
        /// </summary>
        /// <param name="accountType">when a User record is an actual user or when it’s a “service account”</param>
        /// <param name="adminLink">Link to access more information about the user</param>
        /// <param name="adminLink">Link to access more information about the user</param>
        /// <param name="authProvider">Auth provider (login method)</param>
        /// <param name="authProvider">Auth provider (login method)</param>
        /// <param name="createdAt">Timestamp of user creation</param>
        /// <param name="createdAt">Timestamp of user creation</param>
        /// <param name="email">Email address for the user</param>
        /// <param name="hasFirstIntegration">Whether or not the user has their first integration set up</param>
        /// <param name="hasFirstProject">Whether or not the user has their first project imported</param>
        /// <param name="hasPersonalEmail">Indicates whether user has a personal or business email address</param>
        /// <param name="isNonUser">Applies to non-user identities, such as Snyk Orgs</param>
        /// <param name="isSnyk">Whether or not the user belongs to the Snyk org (determined by the email address ending with @snyk.io)</param>
        /// <param name="isSnyk">Whether or not the user belongs to the Snyk org (determined by the email address ending with @snyk.io)</param>
        /// <param name="isSnykAdmin">Whether or not the user should be considered a Snyk administrator</param>
        /// <param name="learnPreferredEcosystems">An array of the ecosystems(eg: javascript, java, docker, kubernetes) that the user selects as their favorites on the snyk learn app.</param>
        /// <param name="productUpdatesConsent">Used by Marketo to determine whether to send product updates emails to users. We are setting this value during product updates consent flow after registration.</param>
        /// <param name="productUpdatesConsentIsDisplayed">
        /// A trait for users who got redirected to `/product-updates` consent page.
        ///
        ///
        /// Will allow us to differentiate these users in Marketo and ensure they don't receive product updates emails without explicitly opting in.
        /// </param>
        /// <param name="userId">Public ID of user</param>
        /// <param name="username">Username of the user</param>
        /// <param name="utmCampaign">Query utmcampaign. All UTM properties must be in snake\_case.</param>
        /// <param name="utmContent">Query utm\_content. All UTM properties must be in snake\_case.</param>
        /// <param name="utmMedium">Query utm\_medium. All UTM properties must be in snake\_case.</param>
        /// <param name="utmSource">Query utm\_source. All UTM properties must be in snake\_case.</param>
        /// <param name="utmTerm">Query utm\_term. All UTM properties must be in snake\_case.</param>
        public Identify(Identify.AccountType? accountType, string adminLink, string admin_link, string authProvider, string auth_provider, double? createdAt, double? created_at, string email, bool? hasFirstIntegration, bool? hasFirstProject, bool? hasPersonalEmail, bool? isNonUser, bool? isSnyk, bool? is_snyk, bool? isSnykAdmin, string[] learnPreferredEcosystems, bool? productUpdatesConsent, bool? productUpdatesConsentIsDisplayed, string user_id, string username, string utmCampaign, string utmContent, string utmMedium, string utmSource, string utmTerm) : base(
            "Identify",
            "identify",
            new Dictionary<string, object>()
            {
                ["accountType"] = accountType != null ? AccountTypeValues[accountType.Value] : null,
                ["admin_link"] = admin_link,
                ["adminLink"] = adminLink,
                ["auth_provider"] = auth_provider,
                ["authProvider"] = authProvider,
                ["created_at"] = created_at,
                ["createdAt"] = createdAt,
                ["email"] = email,
                ["hasFirstIntegration"] = hasFirstIntegration,
                ["hasFirstProject"] = hasFirstProject,
                ["hasPersonalEmail"] = hasPersonalEmail,
                ["is_snyk"] = is_snyk,
                ["isNonUser"] = isNonUser,
                ["isSnyk"] = isSnyk,
                ["isSnykAdmin"] = isSnykAdmin,
                ["learnPreferredEcosystems"] = learnPreferredEcosystems,
                ["productUpdatesConsent"] = productUpdatesConsent,
                ["productUpdatesConsentIsDisplayed"] = productUpdatesConsentIsDisplayed,
                ["user_id"] = user_id,
                ["username"] = username,
                ["utm_campaign"] = utmCampaign,
                ["utm_content"] = utmContent,
                ["utm_medium"] = utmMedium,
                ["utm_source"] = utmSource,
                ["utm_term"] = utmTerm
            }
        )
        {
        }
    }

    /// <summary>
    /// Group properties.
    /// </summary>
    public sealed class Group : Event
    {
        public enum GroupType
        {
            Org,
            Group,
            Account
        }

        private static readonly Dictionary<GroupType, string> GroupTypeValues = new Dictionary<GroupType, string>
        {
            [GroupType.Org] = "org",
            [GroupType.Group] = "group",
            [GroupType.Account] = "account"
        };

        /// <summary>
        /// Create new 'Group'.
        /// </summary>
        /// <param name="groupId">ID that is used in conjunction with a groupType to specify an Org or a Group association: {groupId: 1234, groupType: "org"}</param>
        /// <param name="groupName">The name of the group associated with the org</param>
        /// <param name="groupType">Key that is used to specify the name of the Segment Group that a groupId is being set for.</param>
        /// <param name="internalName">The internal name (org.name) of the org</param>
        /// <param name="name">The display name of the org</param>
        /// <param name="plan">The plan of the org</param>
        /// <param name="projectTypes">The types of projects in the org</param>
        public Group(string groupId, string groupName, Group.GroupType? groupType, string internalName, string name, string plan, string[] projectTypes) : base(
            "Group",
            "group",
            new Dictionary<string, object>()
            {
                ["groupId"] = groupId,
                ["groupName"] = groupName,
                ["groupType"] = groupType != null ? GroupTypeValues[groupType.Value] : null,
                ["internalName"] = internalName,
                ["name"] = name,
                ["plan"] = plan,
                ["projectTypes"] = projectTypes
            }
        )
        {
        }
    }

    /// <summary>
    /// Triggered when the analysis is loaded within the IDE.
    ///
    /// Owner: Georgi Mitev
    /// </summary>
    public sealed class AnalysisIsReady : Event
    {
        public enum AnalysisType
        {
            SnykAdvisor,
            SnykCodeQuality,
            SnykCodeSecurity,
            SnykOpenSource,
            SnykContainer,
            SnykInfrastructureAsCode
        }

        private static readonly Dictionary<AnalysisType, string> AnalysisTypeValues = new Dictionary<AnalysisType, string>
        {
            [AnalysisType.SnykAdvisor] = "Snyk Advisor",
            [AnalysisType.SnykCodeQuality] = "Snyk Code Quality",
            [AnalysisType.SnykCodeSecurity] = "Snyk Code Security",
            [AnalysisType.SnykOpenSource] = "Snyk Open Source",
            [AnalysisType.SnykContainer] = "Snyk Container",
            [AnalysisType.SnykInfrastructureAsCode] = "Snyk Infrastructure as Code"
        };

        public enum Ide
        {
            VisualStudioCode,
            VisualStudio,
            Eclipse,
            JetBrains
        }

        private static readonly Dictionary<Ide, string> IdeValues = new Dictionary<Ide, string>
        {
            [Ide.VisualStudioCode] = "Visual Studio Code",
            [Ide.VisualStudio] = "Visual Studio",
            [Ide.Eclipse] = "Eclipse",
            [Ide.JetBrains] = "JetBrains"
        };

        public enum Result
        {
            Success,
            Error
        }

        private static readonly Dictionary<Result, string> ResultValues = new Dictionary<Result, string>
        {
            [Result.Success] = "Success",
            [Result.Error] = "Error"
        };

        /// <summary>
        /// Create new 'Analysis Is Ready'.
        /// </summary>
        /// <param name="analysisType">
        /// Analysis types selected by the user for the scan:
        ///
        /// * open source vulnerabilities
        ///
        /// * code quality issues
        ///
        /// * code security vulnerabilities
        ///
        /// * advisor issues
        ///
        /// * infrastructure as code issues
        ///
        /// * container vulnerabilities
        /// </param>
        /// <param name="ide">Ide family.</param>
        /// <param name="result">Property has no description provided in tracking plan.</param>
        public AnalysisIsReady(AnalysisIsReady.AnalysisType analysisType, AnalysisIsReady.Ide ide, AnalysisIsReady.Result result) : base(
            "Analysis Is Ready",
            "https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Analysis%20Is%20Ready/version/2.0.3",
            new Dictionary<string, object>()
            {
                ["analysisType"] = AnalysisTypeValues[analysisType],
                ["ide"] = IdeValues[ide],
                ["itly"] = true,
                ["result"] = ResultValues[result]
            }
        )
        {
        }
    }

    /// <summary>
    /// User triggers an analysis or analysis is automatically triggered.
    ///
    /// Owner: Georgi Mitev
    /// </summary>
    public sealed class AnalysisIsTriggered : Event
    {
        public enum Ide
        {
            VisualStudioCode,
            VisualStudio,
            Eclipse,
            JetBrains
        }

        private static readonly Dictionary<Ide, string> IdeValues = new Dictionary<Ide, string>
        {
            [Ide.VisualStudioCode] = "Visual Studio Code",
            [Ide.VisualStudio] = "Visual Studio",
            [Ide.Eclipse] = "Eclipse",
            [Ide.JetBrains] = "JetBrains"
        };

        /// <summary>
        /// Create new 'Analysis Is Triggered'.
        /// </summary>
        /// <param name="analysisType">Analysis types selected by the user for the scan: open source vulnerabilities, code quality issues and/or code security vulnerabilities.</param>
        /// <param name="ide">Ide family.</param>
        /// <param name="triggeredByUser">
        /// * True means that the analysis was triggered by the User.
        ///
        /// * False means that the analysis was triggered automatically by the plugin.
        /// </param>
        public AnalysisIsTriggered(string[] analysisType, AnalysisIsTriggered.Ide ide, bool triggeredByUser) : base(
            "Analysis Is Triggered",
            "https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Analysis%20Is%20Triggered/version/2.0.3",
            new Dictionary<string, object>()
            {
                ["analysisType"] = analysisType,
                ["ide"] = IdeValues[ide],
                ["itly"] = true,
                ["triggeredByUser"] = triggeredByUser
            }
        )
        {
        }
    }

    /// <summary>
    /// This Event fires when the authenticate button is clicked.
    ///
    /// Owner: Bastian Doetsch
    /// </summary>
    public sealed class AuthenticateButtonIsClicked : Event
    {
        public enum EventSource
        {
            Advisor,
            App,
            Learn,
            Ide
        }

        private static readonly Dictionary<EventSource, string> EventSourceValues = new Dictionary<EventSource, string>
        {
            [EventSource.Advisor] = "Advisor",
            [EventSource.App] = "App",
            [EventSource.Learn] = "Learn",
            [EventSource.Ide] = "IDE"
        };

        public enum Ide
        {
            VisualStudioCode,
            VisualStudio,
            Eclipse,
            JetBrains
        }

        private static readonly Dictionary<Ide, string> IdeValues = new Dictionary<Ide, string>
        {
            [Ide.VisualStudioCode] = "Visual Studio Code",
            [Ide.VisualStudio] = "Visual Studio",
            [Ide.Eclipse] = "Eclipse",
            [Ide.JetBrains] = "JetBrains"
        };

        /// <summary>
        /// Create new 'Authenticate Button Is Clicked'.
        /// </summary>
        /// <param name="ide">Ide family.</param>
        /// <param name="eventSource">
        /// Used to identify the source for multi-source events.
        ///
        /// For example, if a given event is shared between Snyk Advisor and Snyk Learn, this property helps to differentiate between the two.
        /// </param>
        public AuthenticateButtonIsClicked(AuthenticateButtonIsClicked.Ide ide, AuthenticateButtonIsClicked.EventSource? eventSource = null) : base(
            "Authenticate Button Is Clicked",
            "https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Authenticate%20Button%20Is%20Clicked/version/1.0.3",
            new Dictionary<string, object>()
            {
                ["eventSource"] = eventSource != null ? EventSourceValues[eventSource.Value] : null,
                ["ide"] = IdeValues[ide],
                ["itly"] = true
            }
        )
        {
        }
    }

    /// <summary>
    /// Triggered when the user selects an issue from the issues list and the issue is loaded.
    ///
    /// Owner: Georgi Mitev
    /// </summary>
    public sealed class IssueInTreeIsClicked : Event
    {
        public enum Ide
        {
            VisualStudioCode,
            VisualStudio,
            Eclipse,
            JetBrains
        }

        private static readonly Dictionary<Ide, string> IdeValues = new Dictionary<Ide, string>
        {
            [Ide.VisualStudioCode] = "Visual Studio Code",
            [Ide.VisualStudio] = "Visual Studio",
            [Ide.Eclipse] = "Eclipse",
            [Ide.JetBrains] = "JetBrains"
        };

        public enum IssueType
        {
            Advisor,
            CodeQualityIssue,
            CodeSecurityVulnerability,
            LicenceIssue,
            OpenSourceVulnerability,
            InfrastructureAsCodeIssue,
            ContainerVulnerability
        }

        private static readonly Dictionary<IssueType, string> IssueTypeValues = new Dictionary<IssueType, string>
        {
            [IssueType.Advisor] = "Advisor",
            [IssueType.CodeQualityIssue] = "Code Quality Issue",
            [IssueType.CodeSecurityVulnerability] = "Code Security Vulnerability",
            [IssueType.LicenceIssue] = "Licence Issue",
            [IssueType.OpenSourceVulnerability] = "Open Source Vulnerability",
            [IssueType.InfrastructureAsCodeIssue] = "Infrastructure as Code Issue",
            [IssueType.ContainerVulnerability] = "Container Vulnerability"
        };

        public enum Severity
        {
            High,
            Medium,
            Low,
            Critical
        }

        private static readonly Dictionary<Severity, string> SeverityValues = new Dictionary<Severity, string>
        {
            [Severity.High] = "High",
            [Severity.Medium] = "Medium",
            [Severity.Low] = "Low",
            [Severity.Critical] = "Critical"
        };

        /// <summary>
        /// Create new 'Issue In Tree Is Clicked'.
        /// </summary>
        /// <param name="ide">Ide family.</param>
        /// <param name="issueId">Issue ID as received from the backend.</param>
        /// <param name="issueType">Issue type</param>
        /// <param name="severity">Severity of the issue</param>
        public IssueInTreeIsClicked(IssueInTreeIsClicked.Ide ide, string issueId = null, IssueInTreeIsClicked.IssueType? issueType = null, IssueInTreeIsClicked.Severity? severity = null) : base(
            "Issue In Tree Is Clicked",
            "https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Issue%20In%20Tree%20Is%20Clicked/version/2.0.4",
            new Dictionary<string, object>()
            {
                ["ide"] = IdeValues[ide],
                ["issueId"] = issueId,
                ["issueType"] = issueType != null ? IssueTypeValues[issueType.Value] : null,
                ["itly"] = true,
                ["severity"] = severity != null ? SeverityValues[severity.Value] : null
            }
        )
        {
        }
    }

    /// <summary>
    /// User installs the IDE plugin and see Snyk's welcome screen.
    ///
    /// Owner: Georgi Mitev
    /// </summary>
    public sealed class WelcomeIsViewed : Event
    {
        public enum Ide
        {
            VisualStudioCode,
            VisualStudio,
            Eclipse,
            JetBrains
        }

        private static readonly Dictionary<Ide, string> IdeValues = new Dictionary<Ide, string>
        {
            [Ide.VisualStudioCode] = "Visual Studio Code",
            [Ide.VisualStudio] = "Visual Studio",
            [Ide.Eclipse] = "Eclipse",
            [Ide.JetBrains] = "JetBrains"
        };

        /// <summary>
        /// Create new 'Welcome Is Viewed'.
        /// </summary>
        /// <param name="ide">Ide family.</param>
        public WelcomeIsViewed(WelcomeIsViewed.Ide ide) : base(
            "Welcome Is Viewed",
            "https://data.amplitude.com/6d7c255e-5bf5-46fc-be87-58b75c7e0ad5/event/Welcome%20Is%20Viewed/version/1.0.3",
            new Dictionary<string, object>()
            {
                ["ide"] = IdeValues[ide],
                ["itly"] = true
            }
        )
        {
        }
    }
}
