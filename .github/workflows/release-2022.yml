name: release for 2022

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * 2'  # every Tuesday at 10 am UTC

env:
  SOLUTION_FILE_PATH: .
  DEFAULT_BRANCH: main

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }} 
    env:
      TEST_API_TOKEN: ${{ secrets.TEST_API_TOKEN }}
      VsixManifestPath: .\Snyk.VisualStudio.Extension.2022\source.extension.vsixmanifest

    steps:
    - uses: actions/checkout@v2
    
    - name: Unshallow
      run: git fetch --prune --unshallow
    
    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - uses: microsoft/variable-substitution@v1 
      with:
        files: '.\Snyk.Common\appsettings.json'
      env:
        SegmentAnalyticsWriteKey: ${{ secrets.SEGMENT_ANALYTICS_WRITE_KEY }}
        SnykCodeApiEndpointUrl: ${{ secrets.SNYK_CODE_API_ENDPOINT_URL }}
        SentryDsn: ${{ secrets.SENTRY_DSN }}
        Environment: ${{ secrets.SENTRY_ENVIRONMENT }}

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: '[17.0, ]'

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1

    - name: Restore NuGet packages
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Increment VSIX version
      id: vsix_version
      uses: timheuer/vsix-version-stamp@v1
      with:
        manifest-file: ${{ env.VsixManifestPath }}
        
    - name: Set up Git actions user
      uses: fregante/setup-git-user@v1
      
    - name: Commit new version
      run: | 
        git commit -am 'increment new version for 2022'
        git tag ${{ steps.vsix_version.outputs.version-number }}
        git push origin main
        git push origin main --tags
        
    - name: Build
      run: |
        msbuild ${{env.SOLUTION_FILE_PATH}} /p:configuration=Release /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /v:m
      shell: powershell

    - name: Tests
      run: vstest.console.exe **\*.Tests.dll
      
    - name: Create 2022 Release
      id: create_release_2022
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 2022-${{ steps.vsix_version.outputs.version-number }}
        release_name: Release 2022 ${{ steps.vsix_version.outputs.version-number }}
        draft: false
        prerelease: false
    - name: Upload 2022 Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release_2022.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: .\Snyk.VisualStudio.Extension.2022\bin\Release\Snyk.VisualStudio.Extension.vsix
        asset_name: Snyk_Vulnerability_Scanner-2022-${{ steps.vsix_version.outputs.version-number }}.vsix
        asset_content_type: application/zip
    
    - name: Publish 2022 extension to Marketplace
      uses: cezarypiatek/VsixPublisherAction@0.1
      with:
        extension-file: '.\Snyk.VisualStudio.Extension.2022\bin\Release\Snyk.VisualStudio.Extension.vsix'
        publish-manifest-file: '.\Snyk.VisualStudio.Extension.2022\vs-publish.json'
        personal-access-code: ${{ secrets.VS_PUBLISHER_ACCESS_TOKEN }}
