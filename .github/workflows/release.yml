name: release

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * 2'  # every Tuesday at 10 am UTC

env:
  SOLUTION_FILE_PATH: .
  DEFAULT_BRANCH: main

jobs:
  build-and-test-vs19:
    runs-on: windows-2019
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    environment: snyk-msbuild-envs
    env:
      TEST_API_TOKEN: ${{ secrets.TEST_API_TOKEN }}
      VsixManifestPath: .\Snyk.VisualStudio.Extension\source.extension.vsixmanifest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: '[16.0, 17.0)'

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1

    - name: Restore NuGet packages
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}
    
    - name: Build
      run: |
        msbuild ${{env.SOLUTION_FILE_PATH}} /p:configuration=Release /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /v:m
      shell: powershell

    - name: Tests
      run: vstest.console.exe **\*.Tests.dll

  build-test-and-release-vs22:
    needs: build-and-test-vs19
    runs-on: windows-2022
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    environment: snyk-msbuild-envs
    env:
      TEST_API_TOKEN: ${{ secrets.TEST_API_TOKEN }}
      VsixManifestPath: .\Snyk.VisualStudio.Extension\source.extension.vsixmanifest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - uses: microsoft/variable-substitution@v1
      with:
        files: '.\Snyk.Common\appsettings.json'
      env:
        SegmentAnalyticsWriteKey: ${{ secrets.SEGMENT_ANALYTICS_WRITE_KEY }}
        SnykCodeApiEndpointUrl: ${{ secrets.SNYK_CODE_API_ENDPOINT_URL }}
        SentryDsn: ${{ secrets.SENTRY_DSN }}
        Environment: ${{ secrets.SENTRY_ENVIRONMENT }}

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: '[17.0, )'

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1

    - name: Restore NuGet packages
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Calculate next semantic version Git tag (vsix version)
      id: vsix_version
      uses: ./.github/actions/next-git-tag

    - name: Set VSIX version for 2015-2019
      uses: cezarypiatek/VsixVersionAction@1.0
      with:
        version: ${{ steps.vsix_version.outputs.next-tag }}
        vsix-manifest-file: .\Snyk.VisualStudio.Extension\source.extension.vsixmanifest

    - name: Set VSIX version for 2022
      uses: cezarypiatek/VsixVersionAction@1.0
      with:
        version: ${{ steps.vsix_version.outputs.next-tag }}
        vsix-manifest-file: .\Snyk.VisualStudio.Extension.2022\source.extension.vsixmanifest

    - name: Build
      run: |
        msbuild ${{env.SOLUTION_FILE_PATH}} /p:configuration=Release /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /v:m
      shell: powershell

    - name: Tests
      run: vstest.console.exe **\*.Tests.dll

    - name: Set up Git actions user
      uses: fregante/setup-git-user@v1

    - name: Create and push Git tag release
      run: |
        git tag ${{ steps.vsix_version.outputs.next-tag }}
        git push origin main
        git push origin main --tags

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.vsix_version.outputs.next-tag }}
        release_name: Release ${{ steps.vsix_version.outputs.next-tag }}
        draft: false
        prerelease: false

    - name: Upload GitHub Release 2015-2019 Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .\Snyk.VisualStudio.Extension\bin\Release\Snyk.VisualStudio.Extension.vsix
        asset_name: Snyk_Vulnerability_Scanner-${{ steps.vsix_version.outputs.next-tag }}.vsix
        asset_content_type: application/zip

    - name: Upload GitHub Release 2022 Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .\Snyk.VisualStudio.Extension.2022\bin\Release\Snyk.VisualStudio.Extension.vsix
        asset_name: Snyk_Vulnerability_Scanner-${{ steps.vsix_version.outputs.next-tag }}-2022.vsix
        asset_content_type: application/zip

    - name: Publish 2015-2019 extension to Marketplace
      uses: cezarypiatek/VsixPublisherAction@0.2
      with:
        extension-file: '.\Snyk.VisualStudio.Extension\bin\Release\Snyk.VisualStudio.Extension.vsix'
        publish-manifest-file: '.\Snyk.VisualStudio.Extension\vs-publish.json'
        personal-access-code: ${{ secrets.VS_PUBLISHER_ACCESS_TOKEN }}

    - name: Publish 2022 extension to Marketplace
      uses: cezarypiatek/VsixPublisherAction@0.2
      with:
        extension-file: '.\Snyk.VisualStudio.Extension.2022\bin\Release\Snyk.VisualStudio.Extension.vsix'
        publish-manifest-file: '.\Snyk.VisualStudio.Extension.2022\vs-publish.json'
        personal-access-code: ${{ secrets.VS_PUBLISHER_ACCESS_TOKEN }}
